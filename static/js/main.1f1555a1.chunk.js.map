{"version":3,"sources":["components/navbar/Navbar.js","constants/settings.js","constants/strings.js","screens/CreateGame.js","screens/Home.js","screens/SharedWordls.js","lib/localStorage.js","App.js","context/AlertContext.js","reportWebVitals.js","index.js"],"names":["Navbar","enUS","_ref","setIsInfoModalOpen","setIsStatsModalOpen","setIsSettingsModalOpen","setIsDatePickerModalOpen","react","className","index_esm","onClick","dist","to","ChartBarIcon","CogIcon","CreateGame","_useState","useState","_useState2","Object","slicedToArray","_useState3","_useState4","_useState5","_useState6","_useState7","_useState8","_useState9","_useState10","_useState11","_useState12","window","matchMedia","matches","esm","Navbar_Navbar","Home","console","log","classnames","type","SharedWordls","setSentWords","concat","useEffect","wordArr","JSON","parse","localStorage","getItem","App","react_router_dist","path","element","screens_Home","screens_CreateGame","screens_SharedWordls","AlertContext","createContext","status","message","isVisible","showSuccess","showError","displayName","AlertProvider","children","setStatus","setMessage","setIsVisible","show","useCallback","showStatus","newMessage","options","_ref2","_ref2$delayMs","delayMs","persist","onClose","_ref2$durationMs","durationMs","setTimeout","Provider","value","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","react_default","a","createElement","StrictMode","AlertContext_AlertProvider","src_App"],"mappings":"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","file":"static/js/main.1f1555a1.chunk.js","sourcesContent":["import { CalendarIcon, ChartBarIcon, CogIcon } from '@heroicons/react/outline';\nimport * as React from 'react';\nimport { FaInfo } from 'react-icons/fa';\nimport { Link } from 'react-router-dom';\n\nimport { ENABLE_ARCHIVED_GAMES } from '../../constants/settings';\nimport { GAME_TITLE } from '../../constants/strings';\n\nexport const Navbar = ({\n    setIsInfoModalOpen,\n    setIsStatsModalOpen,\n    setIsDatePickerModalOpen,\n    setIsSettingsModalOpen,\n}) => {\n    return (\n        <div className=\"navbar\">\n            <div className=\"navbar-content px-5 short:h-auto\">\n                <div className=\"flex\">\n                    <FaInfo\n                        className=\"h-6 w-6 cursor-pointer dark:stroke-white\"\n                        onClick={() => setIsInfoModalOpen(true)}\n                    />\n                    {ENABLE_ARCHIVED_GAMES && (\n                        <CalendarIcon\n                            className=\"ml-3 h-6 w-6 cursor-pointer dark:stroke-white\"\n                            onClick={() => setIsDatePickerModalOpen(true)}\n                        />\n                    )}\n                </div>\n                <Link to=\"/Wgame\">\n                    <p className=\"text-xl font-bold dark:text-white\">\n                        {GAME_TITLE}\n                    </p>\n                </Link>\n\n                <div className=\"right-icons\">\n                    <ChartBarIcon\n                        className=\"mr-3 h-6 w-6 cursor-pointer dark:stroke-white\"\n                        onClick={() => setIsStatsModalOpen(true)}\n                    />\n                    <CogIcon\n                        className=\"h-6 w-6 cursor-pointer dark:stroke-white\"\n                        onClick={() => setIsSettingsModalOpen(true)}\n                    />\n                </div>\n            </div>\n            <hr></hr>\n        </div>\n    );\n};\n","import { enUS } from 'date-fns/locale';\n\nexport const MAX_CHALLENGES = 6;\nexport const NEW_CHALLENGE = 2;\n\nexport const ALERT_TIME_MS = 2000;\nexport const LONG_ALERT_TIME_MS = 10000;\nexport const REVEAL_TIME_MS = 350;\nexport const WELCOME_INFO_MODAL_MS = 350;\nexport const DISCOURAGE_INAPP_BROWSERS = true;\nexport const ENABLE_MIGRATE_STATS = true;\nexport const BLOWFISH_KEY = 'xcQUAHsik#Thq&LG*8es2DsZ$3bw^e';\nexport const BLOWFISH_IV = '#45XmF^w';\nexport const ENABLE_ARCHIVED_GAMES = false;\nexport const DATE_LOCALE = enUS;\n","export const GAME_TITLE = 'WordGame';\n\nexport const WIN_MESSAGES = ['Great Job!', 'Awesome', 'Well done!'];\nexport const GAME_COPIED_MESSAGE = 'Game copied to clipboard';\nexport const NOT_ENOUGH_LETTERS_MESSAGE = 'Not enough letters';\nexport const WORD_NOT_FOUND_MESSAGE = 'Word not found';\nexport const HARD_MODE_ALERT_MESSAGE =\n    'Hard Mode can only be enabled at the start!';\nexport const HARD_MODE_DESCRIPTION =\n    'Any revealed hints must be used in subsequent guesses';\nexport const HIGH_CONTRAST_MODE_DESCRIPTION = 'For improved color vision';\nexport const CORRECT_WORD_MESSAGE = solution => `The word was ${solution}`;\nexport const WRONG_SPOT_MESSAGE = (guess, position) =>\n    `Must use ${guess} in position ${position}`;\nexport const NOT_CONTAINED_MESSAGE = letter => `Guess must contain ${letter}`;\nexport const ENTER_TEXT = 'Enter';\nexport const DELETE_TEXT = 'Delete';\nexport const STATISTICS_TITLE = 'Statistics';\nexport const SHARE_GAME_MODAL_TITLE = 'Share your word';\nexport const SHARE_GAME_MODAL_WORD = 'Choose your word!';\n\nexport const GUESS_DISTRIBUTION_TEXT = 'Guess Distribution';\nexport const NEW_WORD_TEXT = 'New word in';\nexport const SHARE_TEXT = 'Share';\nexport const CREATE_FROM_STAT_TEXT = 'Create';\n\nexport const SHARE_FAILURE_TEXT =\n    'Unable to share the results. This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.';\nexport const MIGRATE_BUTTON_TEXT = 'Transfer';\nexport const SHARE_BUTTON_TEXT = 'Share';\n\nexport const MIGRATE_DESCRIPTION_TEXT =\n    'Click here to transfer your statistics to a new device.';\nexport const SHARE_DESCRIPTION_TEXT =\n    'Click here to share your word with your friends.';\nexport const TOTAL_TRIES_TEXT = 'Total tries';\nexport const SUCCESS_RATE_TEXT = 'Success rate';\nexport const CURRENT_STREAK_TEXT = 'Current streak';\nexport const BEST_STREAK_TEXT = 'Best streak';\nexport const DISCOURAGE_INAPP_BROWSER_TEXT =\n    \"You are using an embedded browser and may experience problems sharing or saving your results. We encourage you rather to use your device's default browser.\";\nexport const DATEPICKER_TITLE = 'Choose a past date';\nexport const DATEPICKER_CHOOSE_TEXT = 'Choose';\nexport const DATEPICKER_TODAY_TEXT = 'today';\nexport const ARCHIVE_GAMEDATE_TEXT = 'Game date';\n","import queryString from 'query-string';\nimport * as React from 'react';\nimport {  useState } from 'react';\nimport Div100vh from 'react-div-100vh';\nimport { default as GraphemeSplitter } from 'grapheme-splitter';\n\n// import { NewWord } from '../components/newWord/NewWord';\nimport { Navbar } from '../components/navbar/Navbar';\n\nimport {  GAME_COPIED_MESSAGE, SHARE_GAME_MODAL_WORD } from '../constants/strings';\n// import { useAlert } from '../context/AlertContext';\n// import { getStoredIsHighContrastMode } from '../lib/localStorage';\n// import { findFirstUnusedReveal, getIsLatestGame, isWinningWord, isWordInWordList, unicodeLength } from '../lib/words';\n// import { loadStats } from '../lib/stats';\n// import { ShareGameModal } from '../components/modals/ShareGameModal';\n// import { shareWord } from '../lib/shareWord';\n\nconst CreateGame = () => {\n    // let [searchParams, setSearchParams] = useSearchParams();\n    const [isInfoModalOpen, setIsInfoModalOpen] = useState(false);\n    const [isStatsModalOpen, setIsStatsModalOpen] = useState(false);\n    const [isShareGameModal, setIsShareGameModal] = useState(false);\n\n    const [isDatePickerModalOpen, setIsDatePickerModalOpen] = useState(false);\n    const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false);\n    const [isMigrateStatsModalOpen, setIsMigrateStatsModalOpen] = useState(false);\n    // const [isHighContrastMode, setIsHighContrastMode] = useState(getStoredIsHighContrastMode());\n    const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    // const [isDarkMode, setIsDarkMode] = useState(localStorage.getItem('theme')\n    // ? localStorage.getItem('theme') === 'dark'\n    // : prefersDarkMode\n    //     ? true\n    //     : false);\n    // const [isHardMode, setIsHardMode] = useState(localStorage.getItem('gameMode')\n    // ? localStorage.getItem('gameMode') === 'hard'\n    // : false);\n    //     const [guesses, setGuesses] = useState([])\n\n    // const [guesses, setGuesses] = useState(() => {\n    //     const loaded = loadGameStateFromLocalStorage(isLatestGame);\n    //     console.log('=====loaded===============================');\n        \n    //     console.log('====================================');\n    //     if (\n    //         (loaded === null || loaded === void 0\n    //             ? void 0\n    //             : loaded.solution) !== solution\n    //     ) {\n    //         return [];\n    //     }\n        // const gameWasWon = loaded.guesses.includes(solution);\n        // if (gameWasWon) {\n        //     setIsGameWon(true);\n        // }\n        // if (loaded.guesses.length === NEW_CHALLENGE && !gameWasWon) {\n        //     setIsGameLost(true);\n        //     showErrorAlert(CORRECT_WORD_MESSAGE(solution), {\n        //         persist: true,\n        //     });\n        // }\n        // return loaded.guesses;\n    // });\n    // const isLatestGame = getIsLatestGame();\n    // const [isGameWon, setIsGameWon] = useState(false);\n\n    // const [currentGuess, setCurrentGuess] = useState('');\n    // const [isRevealing, setIsRevealing] = useState(false);\n    // const [currentRowClass, setCurrentRowClass] = useState('');\n    // const [isGameLost, setIsGameLost] = useState(false);\n    // const [stats, setStats] = useState(() => loadStats());\n    // const {\n    //     showError: showErrorAlert,\n    //     showSuccess: showSuccessAlert,\n    // } = useAlert();\n\n    // const currentword = searchParams.get('currentword');\n    // const queryParams = queryString.parse(window);\n  //   const onChar = (value) => {\n   \n  //     if (unicodeLength(`${currentGuess}${value}`) <= 5 &&\n  //         guesses.length < MAX_CHALLENGES &&\n  //         !isGameWon) {\n\n  //         setCurrentGuess(`${currentGuess}${value}`);\n  //         setGuesses([...guesses, currentGuess]);\n       \n\n  //     }\n  // };\n//   const onDelete = () => {\n  \n//     setCurrentGuess(new GraphemeSplitter().splitGraphemes(currentGuess).slice(0, -1).join(''));\n//     setGuesses(new GraphemeSplitter().splitGraphemes(currentGuess).slice(0, -1).join(''));\n\n// };\n// const onEnter = () => {\n\n// if (currentGuess.length <5) {\n//   return;\n// }\n// setIsShareGameModal(true)\n//     // if (isGameWon || isGameLost) {\n//     //     return;\n//     // }\n//     // if (!(unicodeLength(currentGuess) === solution.length)) {\n//     //     setCurrentRowClass('jiggle');\n//     //     return showErrorAlert(NOT_ENOUGH_LETTERS_MESSAGE, {\n//     //         onClose: clearCurrentRowClass,\n//     //     });\n//     // }\n//     // if (!isWordInWordList(currentGuess)) {\n//     //     setCurrentRowClass('jiggle');\n//     //     return showErrorAlert(WORD_NOT_FOUND_MESSAGE, {\n//     //         onClose: clearCurrentRowClass,\n//     //     });\n//     // }\n//     // enforce hard mode - all guesses must contain all previously revealed letters\n//     // if (isHardMode) {\n//     //     const firstMissingReveal = findFirstUnusedReveal(currentGuess, guesses);\n//     //     if (firstMissingReveal) {\n//     //         setCurrentRowClass('jiggle');\n//     //         return showErrorAlert(firstMissingReveal, {\n//     //             onClose: clearCurrentRowClass,\n//     //         });\n//     //     }\n//     // }\n//     // setIsRevealing(true);\n//     // turn this back off after all\n//     // chars have been revealed\n//     // setTimeout(() => {\n//     //     setIsRevealing(false);\n//     // }, REVEAL_TIME_MS * solution.length);\n//     // const winningWord = isWinningWord(currentGuess);\n\n//     // if (unicodeLength(currentGuess) === solution.length &&\n//     //     guesses.length < NEW_CHALLENGE &&\n//     //     !isGameWon) {\n//           // console.log('===enter=================================');\n//           // console.log(currentGuess);\n//           // console.log('====================================');\n//         // setGuesses([...guesses, currentGuess]);\n//         // setCurrentGuess('');\n//         // if (winningWord) {\n//         //     if (isLatestGame) {\n//         //         setStats(addStatsForCompletedGame(stats, guesses.length));\n//         //     }\n//         //     return setIsGameWon(true);\n//         // }\n//         // if (guesses.length === NEW_CHALLENGE - 1) {\n//         //     if (isLatestGame) {\n//         //         setStats(addStatsForCompletedGame(stats, guesses.length + 1));\n//         //     }\n//         //     setIsGameLost(true);\n//         //     showErrorAlert(CORRECT_WORD_MESSAGE(solution), {\n//         //         persist: true,\n//         //         delayMs: REVEAL_TIME_MS * solution.length + 1,\n//         //     });\n//         // }\n//     // }\n// };\n// const clearCurrentRowClass = () => {\n//   setCurrentRowClass('');\n// };\n\n// const handleShare = () => {\n//   const baseURL = `http://ronengoren/wordle?currentword=${currentGuess}`\n//   // shareWord(solution, guesses, isGameLost, isHardMode, isDarkMode, isHighContrastMode, baseURL);\n//    shareWord(baseURL,handleShareFailure,handleShareToClipboard);\n\n// };\n\nconst handleShareFailure = () => {\nconsole.log('handleShareFailure');\n\n};\nconst handleShareToClipboard = () => {\n  \n//  console.log(showSuccessAlert(GAME_COPIED_MESSAGE));\n\n};\n\n    return (\n        <Div100vh>\n            <div className=\"flex h-full flex-col\">\n                <Navbar\n                    setIsInfoModalOpen={setIsInfoModalOpen}\n                    setIsStatsModalOpen={setIsStatsModalOpen}\n                    setIsDatePickerModalOpen={setIsDatePickerModalOpen}\n                    setIsSettingsModalOpen={setIsSettingsModalOpen}\n                />\n                <div className=\"mx-auto flex w-full grow flex-col px-1 pt-2 pb-8 sm:px-6 md:max-w-7xl lg:px-8 short:pb-2 short:pt-2\">\n\n                    <div className=\"flex grow flex-col justify-center pb-6 short:pb-2\">\n                        {/* <NewWord\n                            // solution={solution}\n                            guesses={guesses}\n                            currentGuess={currentGuess}\n                            // isRevealing={isRevealing}\n                            // currentRowClassName={currentRowClass}\n                        /> */}\n                         <div className=\"flex items-center justify-center mx-0.5 text-4xl font-bold rounded dark:text-white\">\n                                <p className=\"text-xl font-bold dark:text-white\">{SHARE_GAME_MODAL_WORD}</p>\n\n                                        </div>\n                    </div>\n                    {/* <CreateGameKeyboard \n                    onChar={onChar} \n                    onDelete={onDelete} \n                    onEnter={onEnter} \n                    // solution={solution} \n                    guesses={guesses} \n                    isRevealing={isRevealing}\n                    /> */}\n                     {/* <ShareGameModal \n                     isOpen={isShareGameModal} \n                     handleClose={() => setIsShareGameModal(false)} \n                     solution={currentGuess} \n                     guesses={guesses} \n                     gameStats={stats} \n                    //  isLatestGame={isLatestGame} \n                     isGameLost={isGameLost} \n                     isGameWon={isGameWon} \n                     handleShareToClipboard={() => showSuccessAlert(GAME_COPIED_MESSAGE)} \n                   \n\n                     handleShareFailure={() => handleShareFailure()} \n\n                    //  handleShareFailure={() => showErrorAlert(SHARE_FAILURE_TEXT, { durationMs: LONG_ALERT_TIME_MS,})} \n                    // handleShare={() => handleShare()} \n\n                    isHardMode={isHardMode} \n                    isDarkMode={isDarkMode} \n                    isHighContrastMode={isHighContrastMode} \n                    numberOfGuessesMade={guesses.length}\n                      /> */}\n                </div>\n                {/* <p>Value of location: {currentword}</p> */}\n            </div>\n        </Div100vh>\n    );\n};\n\nexport default CreateGame;\n","import * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport Div100vh from 'react-div-100vh';\nimport { Link } from 'react-router-dom';\nimport classnames from 'classnames';\n\nimport { Navbar } from '../components/navbar/Navbar';\n\nconst Home = () => {\n  console.log('=======Home48=============================');\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false);\n  const [isStatsModalOpen, setIsStatsModalOpen] = useState(false);\n  const [isDatePickerModalOpen, setIsDatePickerModalOpen] = useState(false);\n  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false);\n  const [sentWords, setSentWords] = useState([]);\n\n  const classes = classnames(\n    'xxshort:w-11 xxshort:h-11 short:text-2xl short:w-12 short:h-12 w-14 h-14 border-solid border-2 flex items-center justify-center mx-0.5 text-4xl font-bold rounded dark:text-white',\n    // {\n    //     'bg-white dark:bg-slate-900 border-slate-200 dark:border-slate-600': !status,\n    //     'border-black dark:border-slate-100': value && !status,\n    //     'absent shadowed bg-slate-400 dark:bg-slate-700 text-white border-slate-400 dark:border-slate-700':\n    //         status === 'absent',\n    //     'correct shadowed bg-orange-500 text-white border-orange-500':\n    //         status === 'correct' && isHighContrast,\n    //     'present shadowed bg-cyan-500 text-white border-cyan-500':\n    //         status === 'present' && isHighContrast,\n    //     'correct shadowed bg-green-500 text-white border-green-500':\n    //         status === 'correct' && !isHighContrast,\n    //     'present shadowed bg-yellow-500 text-white border-yellow-500':\n    //         status === 'present' && !isHighContrast,\n    //     'cell-fill-animation': isFilled,\n    //     'cell-reveal': shouldReveal,\n    // },\n  );\n\n  // useEffect(() => {\n  //   const wordArr = getNewWord()\n  //   if (wordArr) {\n  //     setSentWords(wordArr);\n\n  //   }\n\n  // }, []);\n  return (\n    <Div100vh>\n      <div className=\"flex h-full flex-col\">\n        <Navbar\n          setIsInfoModalOpen={setIsInfoModalOpen}\n          setIsStatsModalOpen={setIsStatsModalOpen}\n          setIsDatePickerModalOpen={setIsDatePickerModalOpen}\n          setIsSettingsModalOpen={setIsSettingsModalOpen}\n        />\n        <div className=\"flex justify-center\">\n          <Link to=\"/create_game\">\n\n            <button\n              // disabled={!isCopyButtonEnabled}\n              // onClick={copyEmigrationCodeToClipboard}\n              type=\"button\"\n              className=\"mt-2 inline-flex items-center justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-left text-base font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:border-gray-200\n          disabled:bg-white disabled:text-gray-900 disabled:focus:outline-none disabled:dark:border-gray-600 disabled:dark:bg-gray-800 disabled:dark:text-gray-400 sm:text-sm\"\n            >\n           \n              Create New Game\n            </button>\n          </Link>\n        </div>\n        <div className=\"flex justify-center\">\n          <Link to=\"/user_wordles\">\n\n            <button\n              // disabled={!isCopyButtonEnabled}\n              // onClick={copyEmigrationCodeToClipboard}\n              type=\"button\"\n              className=\"mt-2 inline-flex items-center justify-center rounded-md border border-transparent bg-indigo-600 px-8 py-2 text-left text-base font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:border-gray-200\n          disabled:bg-white disabled:text-gray-900 disabled:focus:outline-none disabled:dark:border-gray-600 disabled:dark:bg-gray-800 disabled:dark:text-gray-400 sm:text-sm\"\n            >\n            \n              Your Wordles\n            </button>\n          </Link>\n        </div>\n       \n\n        <Link to={`/wordle`}>Wordsdsdlsdsde</Link>\n\n      </div>\n\n    </Div100vh>\n  );\n};\n\nexport default Home;\n","import * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport Div100vh from 'react-div-100vh';\nimport { Link } from 'react-router-dom';\nimport classnames from 'classnames';\n\n\nimport { Navbar } from '../components/navbar/Navbar';\n// import { unicodeSplit } from '../lib/words';\nimport { REVEAL_TIME_MS } from '../constants/settings';\nimport { getNewWord } from '../lib/localStorage';\n\nconst SharedWordls = () => {\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false);\n  const [isStatsModalOpen, setIsStatsModalOpen] = useState(false);\n  const [isDatePickerModalOpen, setIsDatePickerModalOpen] = useState(false);\n  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false);\n  const [sentWords, setSentWords] = useState([]);\n  // const splitGuess = unicodeSplit(guess);\n  const animationDelay = `${ 0 * REVEAL_TIME_MS }ms`;\n\n  const classes = classnames(\n    'xxshort:w-11 xxshort:h-11 short:text-2xl short:w-12 short:h-12 w-14 h-14 border-solid border-2 flex items-center justify-center mx-0.5 text-4xl font-bold rounded dark:text-white',\n    // {\n    //     'bg-white dark:bg-slate-900 border-slate-200 dark:border-slate-600': !status,\n    //     'border-black dark:border-slate-100': value && !status,\n    //     'absent shadowed bg-slate-400 dark:bg-slate-700 text-white border-slate-400 dark:border-slate-700':\n    //         status === 'absent',\n    //     'correct shadowed bg-orange-500 text-white border-orange-500':\n    //         status === 'correct' && isHighContrast,\n    //     'present shadowed bg-cyan-500 text-white border-cyan-500':\n    //         status === 'present' && isHighContrast,\n    //     'correct shadowed bg-green-500 text-white border-green-500':\n    //         status === 'correct' && !isHighContrast,\n    //     'present shadowed bg-yellow-500 text-white border-yellow-500':\n    //         status === 'present' && !isHighContrast,\n    //     'cell-fill-animation': isFilled,\n    //     'cell-reveal': shouldReveal,\n    // },\n  );\n\n  useEffect(() => {\n    const wordArr = getNewWord()\n    if (wordArr) {\n      setSentWords(wordArr);\n\n    }\n\n  }, []);\n  return (\n    <Div100vh>\n      <div className=\"flex h-full flex-col\">\n        <Navbar\n          setIsInfoModalOpen={setIsInfoModalOpen}\n          setIsStatsModalOpen={setIsStatsModalOpen}\n          setIsDatePickerModalOpen={setIsDatePickerModalOpen}\n          setIsSettingsModalOpen={setIsSettingsModalOpen}\n        />\n      \n        <div className=\"flex justify-center\">\n          <h1>Your Wordles:</h1>\n        </div>\n        {/* {sentWords ? sentWords.map((i =>\n          <div key={i} className=\"mx-auto flex pt-2 pb-8 sm:px-6 md:max-w-7xl lg:px-8 short:pb-2 short:pt-2\">\n            {unicodeSplit(i).map((letter, h) => <div\n              key={h}\n              className={classes}\n              style={{ animationDelay }}\n            > <div className=\"letter-container\" style={{ animationDelay }}> <h1>{letter}</h1> </div></div>)}\n\n\n          </div>)) : null} */}\n\n        {/* <Link to=\"/wordle\">Wordle</Link> */}\n\n      </div>\n\n    </Div100vh>\n  );\n};\n\nexport default SharedWordls;\n","const gameStateKey = 'gameState';\nconst wordArrKey = 'wordArr';\n\nconst archiveGameStateKey = 'archiveGameState';\nconst highContrastKey = 'highContrast';\nexport const saveGameStateToLocalStorage = (isLatestGame, gameState) => {\n    const key = isLatestGame ? gameStateKey : archiveGameStateKey;\n    localStorage.setItem(key, JSON.stringify(gameState));\n};\nexport const loadGameStateFromLocalStorage = isLatestGame => {\n    const key = isLatestGame ? gameStateKey : archiveGameStateKey;\n    const state = localStorage.getItem(key);\n    return state ? JSON.parse(state) : null;\n};\nconst gameStatKey = 'gameStats';\nexport const saveStatsToLocalStorage = gameStats => {\n    localStorage.setItem(gameStatKey, JSON.stringify(gameStats));\n};\nexport const saveNewWord = newWord => {\n    let wordArr = JSON.parse(localStorage.getItem(wordArrKey)) || [];\n    wordArr.push(newWord);\n\n    localStorage.setItem(wordArrKey, JSON.stringify(wordArr));\n};\nexport const getNewWord = () => {\n    const newWord = JSON.parse(localStorage.getItem(wordArrKey)) || [];\n\n    return newWord;\n};\nexport const loadStatsFromLocalStorage = () => {\n    const stats = localStorage.getItem(gameStatKey);\n    return stats ? JSON.parse(stats) : null;\n};\nexport const setStoredIsHighContrastMode = isHighContrast => {\n    if (isHighContrast) {\n        localStorage.setItem(highContrastKey, '1');\n    } else {\n        localStorage.removeItem(highContrastKey);\n    }\n};\nexport const getStoredIsHighContrastMode = () => {\n    const highContrast = localStorage.getItem(highContrastKey);\n    return highContrast === '1';\n};\n","import './App.css';\n\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport Div100vh from 'react-div-100vh';\nimport { Link, Route, BrowserRouter as Router, Routes } from 'react-router-dom';\n\nimport CreateGame from './screens/CreateGame';\nimport Home from './screens/Home';\nimport SharedWordls from './screens/SharedWordls';\n// import Wordle from './screens/Wordle';\n\nfunction App() {\n    return (\n        <Router>\n            <Routes>\n                <Route path=\"/Wgame\" element={<Home />} />\n                {/* <Route path=\"/wordle\" element={<Wordle />} /> */}\n                <Route path=\"/create_game\" element={<CreateGame />} />\n                <Route path=\"/user_wordles\" element={<SharedWordls />} />\n            </Routes>\n        </Router>\n    );\n}\nexport default App;\n","import * as React from \"react\";\n\nimport { createContext, useCallback, useContext, useState } from \"react\";\nimport { ALERT_TIME_MS } from \"../constants/settings\";\nexport const AlertContext = createContext({\n  status: \"success\",\n  message: null,\n  isVisible: false,\n  showSuccess: () => null,\n  showError: () => null,\n});\nAlertContext.displayName = \"AlertContext\";\nexport const useAlert = () => useContext(AlertContext);\nexport const AlertProvider = ({ children }) => {\n  const [status, setStatus] = useState(\"success\");\n  const [message, setMessage] = useState(null);\n  const [isVisible, setIsVisible] = useState(false);\n  const show = useCallback(\n    (showStatus, newMessage, options) => {\n      const { delayMs = 0, persist, onClose, durationMs = ALERT_TIME_MS } =\n        options || {};\n      setTimeout(() => {\n        setStatus(showStatus);\n        setMessage(newMessage);\n        setIsVisible(true);\n        if (!persist) {\n          setTimeout(() => {\n            setIsVisible(false);\n            if (onClose) {\n              onClose();\n            }\n          }, durationMs);\n        }\n      }, delayMs);\n    },\n    [setStatus, setMessage, setIsVisible]\n  );\n  const showError = useCallback(\n    (newMessage, options) => {\n      show(\"error\", newMessage, options);\n    },\n    [show]\n  );\n  const showSuccess = useCallback(\n    (newMessage, options) => {\n      show(\"success\", newMessage, options);\n    },\n    [show]\n  );\n  return (\n    <AlertContext.Provider\n      value={{\n        status,\n        message,\n        isVisible,\n        showError,\n        showSuccess,\n      }}\n    >\n      {children}\n    </AlertContext.Provider>\n  );\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './assets/main.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport App from './App';\nimport { AlertProvider } from './context/AlertContext';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <React.StrictMode>\n        <AlertProvider>\n            <App />\n        </AlertProvider>\n    </React.StrictMode>,\n);\n\nreportWebVitals();\n"],"sourceRoot":""}